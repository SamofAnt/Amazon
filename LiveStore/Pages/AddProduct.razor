@page "/AddProduct"
@using LiveStore.ORM
@using LiveStore.Data.Interfaces
@using LiveStore.Data.Model
@using System.ComponentModel.DataAnnotations
@using LiveStore.ORM.Repositories

@inject IToastService toastService
@inject IProductRepository ProductRepository;
@inject ICategories Categories;
@inject ILogger<AddProduct> Logger;

<h3>Добавление продукта</h3>

<Form Model="@_model"
      OnFinish="ProcessValidForm"
      LabelColSpan="8"
      WrapperColSpan="16">
    <FormItem Label="Название" Style="text-align: left;flex: 0 0 10%;display: block">
        <Input @bind-Value="@context.Name" Style="flex: 0 0 10%;" Placeholder="Введите название товара"/>
    </FormItem>
    <FormItem Label="Цена" Style="text-align: left;flex: 0 0 10%;display: block;">
        <Input @bind-Value="@context.Price" Style="flex: 0 0 10%;" Placeholder="Введите цену товара"/>
    </FormItem>
    <FormItem Label="Картинка" Style="text-align: left;flex: 0 0 10%;display: block;">
        <Input @bind-Value="@context.Image" Style="flex: 0 0 10%;" Placeholder="Введите картинку товара"/>
    </FormItem>
    <FormItem Label="Описание" Style="text-align: left;flex: 0 0 10%;display: block;">
        <TextArea @bind-Value="@context.Description" Style="flex: 0 0 10%;" Placeholder="Введите описание товара"/>
    </FormItem>
    <FormItem Label="Категория" Style="text-align: left;flex: 0 0 10%;display: block;">
        <Select DataSource="@_categories"
                @bind-Value="@context.Category"
                AllowClear
                Placeholder="Выберите категорию">
        </Select>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <button class="button">Добавить товар</button>
    </FormItem>
</Form>

@code {
    private readonly LoginFormModel _model = new();
    private List<string> _categories = new();

    private class LoginFormModel
    {
        [Required]
        public string Category { get; set; }

        [Required]
        public string Name { get; set; }

        [Required]
        public string Price { get; set; }

        [Required]
        public string Image { get; set; }

        [Required]
        [MinLength(10)]
        public string Description { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _categories = Categories.GetCategories().Select(c => c.Name).ToList();
    }

    private async Task ProcessValidForm()
    {
        var product = new Product(Categories.GetCategories().FirstOrDefault(c => c.Name == _model.Category).Id, _model.Name, Convert.ToDecimal(_model.Price), _model.Image, _model.Description);
        await ProductRepository.Add(product);
        toastService.ShowSuccess($"{product.Name} успешно добавлен в каталог", "Добавлено в каталог");
    }

}